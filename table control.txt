*&---------------------------------------------------------------------*
*& Report ZAACAR_HR_TABLE_CONTROL
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zaacar_hr_table_control.

TABLES: pernr,p0001.
*&-------------------------------------------------------------------*
*& TYPES
*&-------------------------------------------------------------------*
TYPES: BEGIN OF ty_s_per,
         mark  TYPE c,
         pernr TYPE pernr-pernr,
         ename TYPE p0001-ename,
         bukrs TYPE p0001-bukrs,
       END OF ty_s_per.

TYPES: ty_t_per TYPE TABLE OF ty_s_per.
*&-------------------------------------------------------------------*
*& DATA
*&-------------------------------------------------------------------*
DATA: wa_per     TYPE ty_s_per,
      it_per     TYPE ty_t_per,
      gt_per     TYPE ty_t_per WITH HEADER LINE,
      it_per_dty TYPE ty_t_per,
      wa_per_dty TYPE ty_s_per.

*DATA : fnam(30), lin TYPE i.

SELECTION-SCREEN BEGIN OF SCREEN 200 AS SUBSCREEN.
SELECT-OPTIONS:
                s_pernr FOR pernr-pernr,
                s_bukrs FOR p0001-bukrs,
                s_werks FOR p0001-werks,
                s_btrtl FOR p0001-btrtl.
SELECTION-SCREEN END OF SCREEN 200.

*&-------------------------------------------------------------------*
*& TABLE CONTROL WIZARD
*&-------------------------------------------------------------------*
*&SPWIZARD: DECLARATION OF TABLECONTROL 'TC_9000' ITSELF
CONTROLS: tc_9000 TYPE TABLEVIEW USING SCREEN 9000.
CONTROLS: tc_9100 TYPE TABLEVIEW USING SCREEN 9000.
CALL SCREEN 9000.

*&SPWIZARD: LINES OF TABLECONTROL 'TC_9000'
DATA:     g_tc_9000_lines  LIKE sy-loopc.

DATA:     ok_code LIKE sy-ucomm.

*&SPWIZARD: OUTPUT MODULE FOR TC 'TC_9000'. DO NOT CHANGE THIS LINE!
*&SPWIZARD: UPDATE LINES FOR EQUIVALENT SCROLLBAR
MODULE tc_9000_change_tc_attr OUTPUT.
  DESCRIBE TABLE it_per LINES tc_9000-lines.
ENDMODULE.

*&SPWIZARD: OUTPUT MODULE FOR TC 'TC_9000'. DO NOT CHANGE THIS LINE!
*&SPWIZARD: GET LINES OF TABLECONTROL
MODULE tc_9000_get_lines OUTPUT.
  g_tc_9000_lines = sy-loopc.
ENDMODULE.

*&SPWIZARD: INPUT MODULE FOR TC 'TC_9000'. DO NOT CHANGE THIS LINE!
*&SPWIZARD: MODIFY TABLE
MODULE tc_9000_modify INPUT.
  MODIFY it_per
    FROM wa_per
    INDEX tc_9000-current_line.
ENDMODULE.

*&SPWIZARD: INPUT MODUL FOR TC 'TC_9000'. DO NOT CHANGE THIS LINE!
*&SPWIZARD: MARK TABLE
MODULE tc_9000_mark INPUT.
  DATA: g_tc_9000_wa2 LIKE LINE OF it_per.
  IF tc_9000-line_sel_mode = 1
  AND wa_per-mark = 'X'.
    LOOP AT it_per INTO g_tc_9000_wa2
      WHERE mark = 'X'.
      g_tc_9000_wa2-mark = ''.
      MODIFY it_per
        FROM g_tc_9000_wa2
        TRANSPORTING mark.
    ENDLOOP.
  ENDIF.
  MODIFY it_per
    FROM wa_per
    INDEX tc_9000-current_line
    TRANSPORTING mark.
ENDMODULE.

*&SPWIZARD: INPUT MODULE FOR TC 'TC_9000'. DO NOT CHANGE THIS LINE!
*&SPWIZARD: PROCESS USER COMMAND
MODULE tc_9000_user_command INPUT.
  ok_code = sy-ucomm.
  DATA: it_per_wa2 LIKE LINE OF it_per,
        lv_tabix   LIKE sy-tabix,
        lv_line    LIKE sy-tabix.
  CLEAR: lv_tabix,lv_line.
  CASE ok_code.
    WHEN 'ARA'.
      SELECT pernr ename bukrs
        FROM pa0001
        INTO CORRESPONDING FIELDS OF TABLE it_per
        WHERE pernr IN s_pernr
          AND bukrs IN s_bukrs.
      SORT it_per BY pernr.
      DELETE ADJACENT DUPLICATES FROM it_per.
      CLEAR: it_per_dty[], ok_code.
    WHEN 'ONCE'.
      READ TABLE it_per_dty INTO wa_per_dty INDEX 1.
      LOOP AT it_per INTO it_per_wa2 WHERE pernr EQ wa_per_dty-pernr
         AND bukrs EQ wa_per_dty-bukrs.
        lv_tabix = sy-tabix - 1.
        IF lv_tabix GT 0.
          CLEAR: it_per_wa2,wa_per_dty.
          READ TABLE it_per INTO wa_per_dty INDEX lv_tabix.
          FREE it_per_dty[].
          APPEND wa_per_dty
              TO it_per_dty.
*        INDEX lv_tabix.
        ENDIF.
      ENDLOOP.
    WHEN 'SONRA'.
      READ TABLE it_per_dty INTO wa_per_dty INDEX 1.
      LOOP AT it_per INTO it_per_wa2 WHERE pernr EQ wa_per_dty-pernr
         AND bukrs EQ wa_per_dty-bukrs.
        lv_tabix = sy-tabix + 1.
        DESCRIBE TABLE it_per LINES lv_line.
        IF lv_tabix LE lv_line.
          CLEAR: it_per_wa2,wa_per_dty.
          READ TABLE it_per INTO wa_per_dty INDEX lv_tabix.
          FREE it_per_dty[].
          APPEND wa_per_dty
              TO it_per_dty.
        ENDIF.
      ENDLOOP.
    WHEN 'DTY'.
      IF it_per_dty IS NOT INITIAL.
        LOOP AT it_per_dty INTO wa_per_dty.
          CALL SCREEN 9100 STARTING AT 1 1 ENDING AT 130 25.
        ENDLOOP.
      ELSE.
        MESSAGE 'Kullanıcıyı seçmeden detayını görüntüleyemezsiniz.' TYPE 'I' DISPLAY LIKE 'E'.
      ENDIF.
  ENDCASE.
  PERFORM user_ok_tc USING    'TC_9000'
                              'IT_PER'
                              'MARK'
                     CHANGING ok_code.
  sy-ucomm = ok_code.
ENDMODULE.

*----------------------------------------------------------------------*
*   INCLUDE TABLECONTROL_FORMS                                         *
*----------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  USER_OK_TC                                               *
*&---------------------------------------------------------------------*
FORM user_ok_tc USING    p_tc_name TYPE dynfnam
                         p_table_name
                         p_mark_name
                CHANGING p_ok      LIKE sy-ucomm.

*&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA: l_ok     TYPE sy-ucomm,
        l_offset TYPE i.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

*&SPWIZARD: Table control specific operations                          *
*&SPWIZARD: evaluate TC name and operations                            *
  SEARCH p_ok FOR p_tc_name.
  IF sy-subrc <> 0.
    EXIT.
  ENDIF.
  l_offset = strlen( p_tc_name ) + 1.
  l_ok = p_ok+l_offset.
*&SPWIZARD: execute general and TC specific operations                 *
  CASE l_ok.
    WHEN 'INSR'.                      "insert row
      PERFORM fcode_insert_row USING    p_tc_name
                                        p_table_name.
      CLEAR p_ok.

    WHEN 'DELE'.                      "delete row
      PERFORM fcode_delete_row USING    p_tc_name
                                        p_table_name
                                        p_mark_name.
      CLEAR p_ok.

    WHEN 'P--' OR                     "top of list
         'P-'  OR                     "previous page
         'P+'  OR                     "next page
         'P++'.                       "bottom of list
      PERFORM compute_scrolling_in_tc USING p_tc_name
                                            l_ok.
      CLEAR p_ok.
*     WHEN 'L--'.                       "total left
*       PERFORM FCODE_TOTAL_LEFT USING P_TC_NAME.
*
*     WHEN 'L-'.                        "column left
*       PERFORM FCODE_COLUMN_LEFT USING P_TC_NAME.
*
*     WHEN 'R+'.                        "column right
*       PERFORM FCODE_COLUMN_RIGHT USING P_TC_NAME.
*
*     WHEN 'R++'.                       "total right
*       PERFORM FCODE_TOTAL_RIGHT USING P_TC_NAME.
*
    WHEN 'MARK'.                      "mark all filled lines
      PERFORM fcode_tc_mark_lines USING p_tc_name
                                        p_table_name
                                        p_mark_name   .
      CLEAR p_ok.

    WHEN 'DMRK'.                      "demark all filled lines
      PERFORM fcode_tc_demark_lines USING p_tc_name
                                          p_table_name
                                          p_mark_name .
      CLEAR p_ok.

*     WHEN 'SASCEND'   OR
*          'SDESCEND'.                  "sort column
*       PERFORM FCODE_SORT_TC USING P_TC_NAME
*                                   l_ok.

  ENDCASE.

ENDFORM.                              " USER_OK_TC

*&---------------------------------------------------------------------*
*&      Form  FCODE_INSERT_ROW                                         *
*&---------------------------------------------------------------------*
FORM fcode_insert_row
              USING    p_tc_name           TYPE dynfnam
                       p_table_name             .

*&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA l_lines_name       LIKE feld-name.
  DATA l_selline          LIKE sy-stepl.
  DATA l_lastline         TYPE i.
  DATA l_line             TYPE i.
  DATA l_table_name       LIKE feld-name.
  FIELD-SYMBOLS <tc>                 TYPE cxtab_control.
  FIELD-SYMBOLS <table>              TYPE STANDARD TABLE.
  FIELD-SYMBOLS <lines>              TYPE i.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (p_tc_name) TO <tc>.

*&SPWIZARD: get the table, which belongs to the tc                     *
  CONCATENATE p_table_name '[]' INTO l_table_name. "table body
  ASSIGN (l_table_name) TO <table>.                "not headerline

*&SPWIZARD: get looplines of TableControl                              *
  CONCATENATE 'G_' p_tc_name '_LINES' INTO l_lines_name.
  ASSIGN (l_lines_name) TO <lines>.

*&SPWIZARD: get current line                                           *
  GET CURSOR LINE l_selline.
  IF sy-subrc <> 0.                   " append line to table
    l_selline = <tc>-lines + 1.
*&SPWIZARD: set top line                                               *
    IF l_selline > <lines>.
      <tc>-top_line = l_selline - <lines> + 1 .
    ELSE.
      <tc>-top_line = 1.
    ENDIF.
  ELSE.                               " insert line into table
    l_selline = <tc>-top_line + l_selline - 1.
    l_lastline = <tc>-top_line + <lines> - 1.
  ENDIF.
*&SPWIZARD: set new cursor line                                        *
  l_line = l_selline - <tc>-top_line + 1.

*&SPWIZARD: insert initial line                                        *
  INSERT INITIAL LINE INTO <table> INDEX l_selline.
  <tc>-lines = <tc>-lines + 1.
*&SPWIZARD: set cursor                                                 *
  SET CURSOR LINE l_line.

ENDFORM.                              " FCODE_INSERT_ROW

*&---------------------------------------------------------------------*
*&      Form  FCODE_DELETE_ROW                                         *
*&---------------------------------------------------------------------*
FORM fcode_delete_row
              USING    p_tc_name           TYPE dynfnam
                       p_table_name
                       p_mark_name   .

*&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA l_table_name       LIKE feld-name.

  FIELD-SYMBOLS <tc>         TYPE cxtab_control.
  FIELD-SYMBOLS <table>      TYPE STANDARD TABLE.
  FIELD-SYMBOLS <wa>.
  FIELD-SYMBOLS <mark_field>.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (p_tc_name) TO <tc>.

*&SPWIZARD: get the table, which belongs to the tc                     *
  CONCATENATE p_table_name '[]' INTO l_table_name. "table body
  ASSIGN (l_table_name) TO <table>.                "not headerline

*&SPWIZARD: delete marked lines                                        *
  DESCRIBE TABLE <table> LINES <tc>-lines.

  LOOP AT <table> ASSIGNING <wa>.

*&SPWIZARD: access to the component 'FLAG' of the table header         *
    ASSIGN COMPONENT p_mark_name OF STRUCTURE <wa> TO <mark_field>.

    IF <mark_field> = 'X'.
      DELETE <table> INDEX syst-tabix.
      IF sy-subrc = 0.
        <tc>-lines = <tc>-lines - 1.
      ENDIF.
    ENDIF.
  ENDLOOP.

ENDFORM.                              " FCODE_DELETE_ROW

*&---------------------------------------------------------------------*
*&      Form  COMPUTE_SCROLLING_IN_TC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_TC_NAME  name of tablecontrol
*      -->P_OK       ok code
*----------------------------------------------------------------------*
FORM compute_scrolling_in_tc USING    p_tc_name
                                      p_ok.
*&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA l_tc_new_top_line     TYPE i.
  DATA l_tc_name             LIKE feld-name.
  DATA l_tc_lines_name       LIKE feld-name.
  DATA l_tc_field_name       LIKE feld-name.

  FIELD-SYMBOLS <tc>         TYPE cxtab_control.
  FIELD-SYMBOLS <lines>      TYPE i.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (p_tc_name) TO <tc>.
*&SPWIZARD: get looplines of TableControl                              *
  CONCATENATE 'G_' p_tc_name '_LINES' INTO l_tc_lines_name.
  ASSIGN (l_tc_lines_name) TO <lines>.


*&SPWIZARD: is no line filled?                                         *
  IF <tc>-lines = 0.
*&SPWIZARD: yes, ...                                                   *
    l_tc_new_top_line = 1.
  ELSE.
*&SPWIZARD: no, ...                                                    *
    CALL FUNCTION 'SCROLLING_IN_TABLE'
      EXPORTING
        entry_act      = <tc>-top_line
        entry_from     = 1
        entry_to       = <tc>-lines
        last_page_full = 'X'
        loops          = <lines>
        ok_code        = p_ok
        overlapping    = 'X'
      IMPORTING
        entry_new      = l_tc_new_top_line
      EXCEPTIONS
*       NO_ENTRY_OR_PAGE_ACT  = 01
*       NO_ENTRY_TO    = 02
*       NO_OK_CODE_OR_PAGE_GO = 03
        OTHERS         = 0.
  ENDIF.

*&SPWIZARD: get actual tc and column                                   *
  GET CURSOR FIELD l_tc_field_name
             AREA  l_tc_name.

  IF syst-subrc = 0.
    IF l_tc_name = p_tc_name.
*&SPWIZARD: et actual column                                           *
      SET CURSOR FIELD l_tc_field_name LINE 1.
    ENDIF.
  ENDIF.

*&SPWIZARD: set the new top line                                       *
  <tc>-top_line = l_tc_new_top_line.


ENDFORM.                              " COMPUTE_SCROLLING_IN_TC

*&---------------------------------------------------------------------*
*&      Form  FCODE_TC_MARK_LINES
*&---------------------------------------------------------------------*
*       marks all TableControl lines
*----------------------------------------------------------------------*
*      -->P_TC_NAME  name of tablecontrol
*----------------------------------------------------------------------*
FORM fcode_tc_mark_lines USING p_tc_name
                               p_table_name
                               p_mark_name.
*&SPWIZARD: EGIN OF LOCAL DATA-----------------------------------------*
  DATA l_table_name       LIKE feld-name.

  FIELD-SYMBOLS <tc>         TYPE cxtab_control.
  FIELD-SYMBOLS <table>      TYPE STANDARD TABLE.
  FIELD-SYMBOLS <wa>.
  FIELD-SYMBOLS <mark_field>.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (p_tc_name) TO <tc>.

*&SPWIZARD: get the table, which belongs to the tc                     *
  CONCATENATE p_table_name '[]' INTO l_table_name. "table body
  ASSIGN (l_table_name) TO <table>.                "not headerline

*&SPWIZARD: mark all filled lines                                      *
  LOOP AT <table> ASSIGNING <wa>.

*&SPWIZARD: access to the component 'FLAG' of the table header         *
    ASSIGN COMPONENT p_mark_name OF STRUCTURE <wa> TO <mark_field>.

    <mark_field> = 'X'.
  ENDLOOP.
ENDFORM.                                          "fcode_tc_mark_lines

*&---------------------------------------------------------------------*
*&      Form  FCODE_TC_DEMARK_LINES
*&---------------------------------------------------------------------*
*       demarks all TableControl lines
*----------------------------------------------------------------------*
*      -->P_TC_NAME  name of tablecontrol
*----------------------------------------------------------------------*
FORM fcode_tc_demark_lines USING p_tc_name
                                 p_table_name
                                 p_mark_name .
*&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA l_table_name       LIKE feld-name.

  FIELD-SYMBOLS <tc>         TYPE cxtab_control.
  FIELD-SYMBOLS <table>      TYPE STANDARD TABLE.
  FIELD-SYMBOLS <wa>.
  FIELD-SYMBOLS <mark_field>.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (p_tc_name) TO <tc>.

*&SPWIZARD: get the table, which belongs to the tc                     *
  CONCATENATE p_table_name '[]' INTO l_table_name. "table body
  ASSIGN (l_table_name) TO <table>.                "not headerline

*&SPWIZARD: demark all filled lines                                    *
  LOOP AT <table> ASSIGNING <wa>.

*&SPWIZARD: access to the component 'FLAG' of the table header         *
    ASSIGN COMPONENT p_mark_name OF STRUCTURE <wa> TO <mark_field>.

    <mark_field> = space.
  ENDLOOP.
ENDFORM.                                          "fcode_tc_mark_lines
*&---------------------------------------------------------------------*
*&      Module  EXIT  INPUT
*&---------------------------------------------------------------------*
MODULE exit INPUT.
  CASE sy-ucomm.
    WHEN '&F03'.
      LEAVE TO SCREEN 0.
    WHEN '&F12'.
      LEAVE TO SCREEN 0.
    WHEN '&F15'.
      LEAVE TO SCREEN 0.
  ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  SELECT_RECORDS  OUTPUT
*&---------------------------------------------------------------------*
MODULE select_records OUTPUT.

  SET PF-STATUS 'ZSTANDARD'.
  SET TITLEBAR 'DENEME TABLOSU'.

ENDMODULE.

*&SPWIZARD: DECLARATION OF TABLECONTROL 'TC_9100' ITSELF
*CONTROLS: tc_9100 TYPE TABLEVIEW USING SCREEN 9000.

*&SPWIZARD: OUTPUT MODULE FOR TC 'TC_9100'. DO NOT CHANGE THIS LINE!
*&SPWIZARD: UPDATE LINES FOR EQUIVALENT SCROLLBAR
MODULE tc_9100_change_tc_attr OUTPUT.
  tc_9100-lines = 1.
  "DESCRIBE TABLE IT_PER_DTY LINES TC_9100-lines.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  PER_DTY  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE per_dty INPUT.
  IF tc_9000-line_sel_mode = 1
    AND wa_per-mark = 'X'.
    REFRESH: it_per_dty.
    MOVE-CORRESPONDING wa_per TO wa_per_dty.
    APPEND wa_per_dty TO it_per_dty.
    CLEAR: wa_per_dty, wa_per-mark.
  ENDIF.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_9100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_9100 OUTPUT.
  DATA: w_lines TYPE i.
  TYPES pict_line(256) TYPE c.
  DATA : container TYPE REF TO cl_gui_custom_container,
         picture   TYPE REF TO cl_gui_picture,
         pict_tab  TYPE TABLE OF pict_line,
         url(255)  TYPE c.
  DATA: graphic_url(255).
  DATA: BEGIN OF graphic_table OCCURS 0,
          line(255) TYPE x,
        END OF graphic_table.
  DATA: l_graphic_conv TYPE i.
  DATA: l_graphic_offs TYPE i.
  DATA: graphic_size TYPE i.
  DATA: l_graphic_xstr TYPE xstring.

ENDMODULE.